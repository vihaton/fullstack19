{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","services_persons","axios","get","then","response","data","newObject","post","id","put","concat","delete","Filter","props","console","log","react_default","a","createElement","value","nf","onChange","hfc","Notification","_ref","message","className","PersonForm","onSubmit","ae","nn","hnamec","nnum","hnumc","type","Person","_ref2","person","re","name","number","onClick","Persons","_ref3","toShow","map","p","App_Person","key","App","_useState","useState","_useState2","Object","slicedToArray","persons","setPersons","_useState3","_useState4","newName","setNewName","_useState5","_useState6","newNumber","setNewNumber","_useState7","_useState8","newFilter","setNewFilter","_useState9","_useState10","notification","setNotification","entriesToShow","filter","toUpperCase","includes","useEffect","personService","catch","error","notify","msg","setTimeout","App_Notification","App_Filter","event","target","App_PersonForm","preventDefault","filtered","length","window","confirm","changedPerson","objectSpread","App_Persons","promise","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.59c0a507.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n//const baseUrl = 'http://localhost:3001/persons' //dev\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n  const req = axios.delete(`${baseUrl}/${id}`)\n  return req\n}\n\nexport default { getAll, create, update, remove}","import React, { useState, useEffect} from 'react'\nimport personService from \"./services/persons\"\nimport './index.css'\n\nconst Filter = (props) => {\n  console.log('render filter', props);\n  \n  return (\n    <div>\n    rajaa näytettäviä: <input \n      value={props.nf}\n      onChange={props.hfc}\n      />\n  </div>\n  )\n}\n\nconst Notification = ({ message }) => {\n  if (!message) {\n    return null\n  } else if (message[0] === \"E\") {\n    return (\n      <div className=\"error\">\n        {message}\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"notification\">\n      {message}\n    </div>\n  )\n}\n\nconst PersonForm = (props) => {\n  console.log('personform, lets render', props);\n  \n  return (\n    <form onSubmit={props.ae}>\n    <div>\n      nimi: <input \n        value={props.nn}\n        onChange={props.hnamec}\n        />\n    </div>\n    <div>\n      numero: <input\n        value={props.nnum}\n        onChange={props.hnumc}\n        />\n    </div>\n    <div>\n      <button type=\"submit\">lisää</button>\n    </div>\n  </form>\n  )\n  \n}\n\nconst Person = ({person, re}) => {\n  console.log('luodaan henkilö', person, re)\n  \n  return (\n    <p>{person.name} {person.number}\n      <button onClick={re}>\n        poista\n      </button>\n    </p>\n  )\n}\n\nconst Persons = ({toShow, re}) => {\n  console.log('lets render persoooooons', toShow);\n  const rows = () => toShow.map(p =>\n    <Person\n      key={p.name}\n      person={p}\n      re={() => re(p)}\n    />\n  )\n\n  return (\n    <div>{rows()}</div>\n  )\n}\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ newFilter, setNewFilter] = useState('')\n  const [notification, setNotification] = useState(null)\n\n\n  const entriesToShow = persons.filter(p => p.name.toUpperCase().includes(newFilter.toUpperCase()))\n\n  useEffect(() => {\n    console.log('get all persons')\n    personService\n      .getAll()\n      .then(data => {\n        setPersons(data)\n    }).catch(error => {\n      console.log('ERROR fetching data', error);\n      \n    })\n  }, [])\n\n  const notify = msg => {\n    setNotification(msg)\n    setTimeout(() => {\n      setNotification(null)\n    }, 5000)\n  }\n  \n  const addEntry = (event) => {\n    event.preventDefault()\n    console.log('nappia painettu, lisäillään...', event.target)\n\n    const filtered = persons.filter(p => p.name === newName)\n    console.log('filtered persons @add entry', filtered);\n    \n    if (filtered.length > 0) {\n      if (window.confirm(`${newName} on jo luettelossa, korvataanko vanha numero uudella?`)) {\n        // --- päivitetään nro ---\n        const changedPerson = {...filtered[0], number: newNumber}\n        console.log('päivitetään henkilö ', changedPerson);\n        \n        personService\n          .update(changedPerson.id, changedPerson)\n          .then(data => {\n            setPersons(persons.map(p => p.id !== changedPerson.id ? p : data))\n            notify(`Henkilön ${changedPerson.name} tiedot päivitetty palvelimelle.`)\n          })\n          .catch(error => {\n            notify(`ERROR: Henkilö '${changedPerson.name}' oli jo poistettu palvelimelta`)\n            setPersons(persons.filter(p => p.id !== changedPerson.id))\n          })\n\n        setNewName(\"\")\n        setNewNumber(\"\")\n      }\n    } else {\n      // --- luodaan kokonaan uusi kirjaus ---\n      console.log('create new entry for', newName);\n      \n      const entryObject = {\n        name: newName,\n        number: newNumber\n      }\n      \n      personService\n        .create(entryObject)\n        .then(data => {\n          setPersons(persons.concat(data))\n          setNewName('')\n          setNewNumber('')\n      }).catch(error => {\n        console.log(\"error @ adding a new person\", error.response.data.error);\n        notify(`ERROR: ${error.response.data.error}`)\n      })\n      //notify(`Henkilön ${entryObject.name} tiedot lisätty palvelimelle.`)\n    }\n  }\n\n  const removeEntry = (person) => {\n    console.log('poistentaan entry nimeltä:', person.name);\n\n    if (window.confirm(`Poistetaanko ${person.name}`)) {\n      console.log('lets remove id', person.id);\n      personService\n        .remove(person.id)\n        .then(promise => {\n          console.log('remove succeeded, promise ', promise);\n          setPersons(persons.filter(p => p.id !== person.id))\n      })\n      notify(`Henkilön ${person.name} tiedot poistettu palvelimelta.`)\n    }\n  }\n  \n  const handleNameChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => setNewFilter(event.target.value)\n\n  return (\n    <div>\n      <h2>Puhelinluettelo</h2>\n      <Notification message={notification} />\n      <Filter nf={newFilter}\n        hfc={handleFilterChange} />\n      <h2>lisää uusi</h2>\n      <PersonForm ae={addEntry} \n        nn={newName}\n        hnamec={handleNameChange}\n        nnum={newNumber}\n        hnumc={handleNumberChange}/>\n      <h2>Numerot</h2>\n      <Persons toShow={entriesToShow}\n        re={removeEntry} />\n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}